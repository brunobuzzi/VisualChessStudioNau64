| package |
package := Package name: 'ChessTacticElements'.
package paxVersion: 1;
	basicComment: ''.


package classNames
	add: #ChessBattery;
	add: #ChessFork;
	add: #ChessPin;
	add: #ChessSkewer;
	add: #ChessTacticInstance;
	add: #TacticDictionary;
	yourself.

package methodNames
	add: #ChessPiece -> #pinnedPieces;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'ChessBasicElements'
	'ChessPiecesMovementsEngine'
	'..\Core\Object Arts\Dolphin\Base\Dolphin').

package!

"Class Definitions"!

Object subclass: #ChessTacticInstance
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #TacticDictionary
	instanceVariableNames: 'tactics'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessTacticInstance subclass: #ChessBattery
	instanceVariableNames: 'piecesDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessTacticInstance subclass: #ChessFork
	instanceVariableNames: 'currentPieceSquare from to'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessTacticInstance subclass: #ChessPin
	instanceVariableNames: 'controlPiece pinnedPiece targetPiece orientation'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessTacticInstance subclass: #ChessSkewer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!ChessPiece methodsFor!

pinnedPieces
	| pinnedPieces |

	self isSlidingPiece ifFalse: [^OrientationDictionary on: self].
	pinnedPieces := OrientationDictionary on: self.
	self chessboardDo:	[:aChessboard |
			self squaresScopeFrom: self currentChessSquare
				do: [:aSquaresDictionary | 
					aSquaresDictionary squaresCollectionAndOrientationDo: [:squareCollection :orientation | | oppositePieces halted pinnedPiece |
						oppositePieces := 0.
						halted := false.
						squareCollection do: [:chessSquare |
								aChessboard
									pieceAt: chessSquare
									do: [:piece |
										(piece isOppositeSideTo: self)
										ifTrue: [oppositePieces := oppositePieces + 1.
											oppositePieces = 1 ifTrue: [pinnedPiece := piece].											
											(oppositePieces > 1 and: [halted not])
											ifTrue: [pinnedPieces 
													atOrientation: orientation 
													add: (ChessPin newOnControl: self pinned: pinnedPiece target: piece orientation: orientation).
												pinnedPiece := piece]]
										ifFalse: [halted := true]
									]
									ifAbsent: []
						]
					]
				]
	].
	^pinnedPieces! !
!ChessPiece categoriesForMethods!
pinnedPieces!new framework!public! !
!

"End of package definition"!

