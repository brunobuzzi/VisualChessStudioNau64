| package |
package := Package name: 'ChessNau64-IDE'.
package paxVersion: 1;
	basicComment: ''.


package classNames
	add: #AbstractChessboardPresenter;
	add: #AbstractChessboardShell;
	add: #AttackedSquaresBySideEffect;
	add: #ChessAbsolutePinEffect;
	add: #ChessAbstractPresenter;
	add: #ChessAbstractShell;
	add: #ChessboardEffect;
	add: #ChessboardPlaygroundPresenter;
	add: #ChessboardPlaygroundShell;
	add: #ChessCenterChunkEffect;
	add: #ChessChunkEffect;
	add: #ChessForkEffect;
	add: #ChessFourChunkEffect;
	add: #ChessGamePresenter;
	add: #ChessGameShell;
	add: #ChessPartialPinEffect;
	add: #ChessPieceDroper;
	add: #ChessPinEffect;
	add: #ChessTacticEffect;
	add: #ChessVisualEffectDefinition;
	yourself.

package methodNames
	add: #Chessboard -> #calculatePositionFor:;
	add: #Chessboard -> #calculatePositionForFile:rank:;
	add: #Chessboard -> #drawOn:isDisplayCoordinatesEnabled:;
	add: #Chessboard -> #squareAt:;
	add: #ChessFork -> #drawOn:on:pieceSquarePen:forkPen:;
	add: #ChessPiece -> #canvasIconAt:;
	add: #ChessPiece -> #drawOn:chessboard:at:isDisplayCoordinatesEnabled:;
	add: #ChessSquare -> #drawNeutralOn:chessboard:isDisplayCoordinatesEnabled:;
	add: #ChessSquare -> #drawOn:chessboard:isDisplayCoordinatesEnabled:;
	add: #ChessSquare -> #drawOppositeOn:chessboard:isDisplayCoordinatesEnabled:;
	add: #King -> #canvasIconAt2:;
	add: #King -> #drawOn2:chessboard:at:isDisplayCoordinatesEnabled:;
	add: #MouseTracker -> #sumStartLocalPointTo:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'ChessBasicElements'
	'ChessEngineTacticSearcher'
	'ChessMatches'
	'ChessParsers'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Image\Dolphin Image Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter'
	'..\Core\Object Arts\Dolphin\MVP\Views\Tooltips\Dolphin Tooltips'
	'..\Core\Object Arts\Dolphin\MVP\Type Converters\Dolphin Type Converters'
	'..\Core\Object Arts\Dolphin\MVP\Models\Value\Dolphin Value Models'
	'..\Core\Object Arts\Dolphin\MVP\Gdiplus\Gdiplus'
	'..\Core\Object Arts\Dolphin\MVP\Gdiplus\Gdiplus ImageView').

package!

"Class Definitions"!

Object subclass: #ChessboardEffect
	instanceVariableNames: 'chessboard'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ChessVisualEffectDefinition
	instanceVariableNames: 'isTopRendered'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessboardEffect subclass: #AttackedSquaresBySideEffect
	instanceVariableNames: 'forceNumbers'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessboardEffect subclass: #ChessChunkEffect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessboardEffect subclass: #ChessTacticEffect
	instanceVariableNames: 'isBlack'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessChunkEffect subclass: #ChessCenterChunkEffect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessChunkEffect subclass: #ChessFourChunkEffect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessTacticEffect subclass: #ChessForkEffect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessTacticEffect subclass: #ChessPinEffect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessPinEffect subclass: #ChessAbsolutePinEffect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessPinEffect subclass: #ChessPartialPinEffect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Presenter subclass: #ChessAbstractPresenter
	instanceVariableNames: 'systemRoot'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessAbstractPresenter subclass: #AbstractChessboardPresenter
	instanceVariableNames: 'chessboardImagePresenter mouseTracker isDisplayCoordinatesEnabled effects'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
AbstractChessboardPresenter subclass: #ChessboardPlaygroundPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
AbstractChessboardPresenter subclass: #ChessGamePresenter
	instanceVariableNames: 'chessGame'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Shell subclass: #ChessAbstractShell
	instanceVariableNames: 'systemRoot'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessAbstractShell subclass: #AbstractChessboardShell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
AbstractChessboardShell subclass: #ChessboardPlaygroundShell
	instanceVariableNames: 'chessboardPresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
AbstractChessboardShell subclass: #ChessGameShell
	instanceVariableNames: 'chessGamePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ValuePresenter subclass: #ChessPieceDroper
	instanceVariableNames: 'chessboardPresenter mouseTracker pieceClass isBlack'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Chessboard methodsFor!

calculatePositionFor: aChessSquare

	^self isReversed
	ifTrue: [(aChessSquare fileNumber * squareSize) @ ((((aChessSquare rankNumber)  * squareSize) - squareSize) + 10)]
	ifFalse: [(aChessSquare fileNumber * squareSize) @ (((8 - aChessSquare rankNumber)  * squareSize) + 10)]!

calculatePositionForFile: aChessFile rank: aChessRank

	^self calculatePositionFor: (systemRoot squareAtFile: aChessFile atRank: aChessRank)!

drawOn: aCanvas isDisplayCoordinatesEnabled: aBoolean

	systemRoot allSquares do: [:each | each drawOn: aCanvas chessboard: self isDisplayCoordinatesEnabled: aBoolean].

	pieces keysAndValuesDo: [:coordinate :each | each drawOn: aCanvas chessboard: self at: coordinate isDisplayCoordinatesEnabled: aBoolean]!

squareAt: aPoint
	| squaresCoordinates |

	squaresCoordinates := Dictionary new.
	self squaresDo: [:each |
		squaresCoordinates at: each put: (each calculatePositionAt: self)].

	squaresCoordinates keysAndValuesDo: [:chessSquare :point | ((Rectangle origin: point extent: squareSize @ squareSize) containsPoint: aPoint) ifTrue: [^chessSquare]].

	^nil! !
!Chessboard categoriesForMethods!
calculatePositionFor:!public! !
calculatePositionForFile:rank:!public! !
drawOn:isDisplayCoordinatesEnabled:!public! !
squareAt:!chessboard contents!public! !
!

!ChessFork methodsFor!

drawOn: aGdiplusGraphics on: aChessboard  pieceSquarePen: pieceSquarePen forkPen: forkPen

	aGdiplusGraphics
		drawLineFrom: (aChessboard calculatePositionFor: currentPieceSquare) + aChessboard halfSquareSize
		to: (aChessboard calculatePositionFor: from) + aChessboard halfSquareSize
		pen: pieceSquarePen.

	to do: [:forkedSquare | 
		aGdiplusGraphics
			drawLineFrom: (aChessboard calculatePositionFor: from) + aChessboard halfSquareSize
			to: (aChessboard calculatePositionFor: forkedSquare) + aChessboard halfSquareSize
			pen: forkPen].! !
!ChessFork categoriesForMethods!
drawOn:on:pieceSquarePen:forkPen:!public! !
!

!ChessPiece methodsFor!

canvasIconAt: aChessSquare
	| file colorPiecePrefix squarePrefix chessboardModel |

	chessboardModel := 'azul_'.
	file := self pieceCode.
	colorPiecePrefix := self isBlack ifTrue: ['b'] ifFalse: ['w'].
	squarePrefix := aChessSquare isBlack ifTrue: ['b'] ifFalse: ['w'].

	^Bitmap fromFile: (FileLocator imageRelative basePath, 'Ajedrez\', chessboardModel, colorPiecePrefix, file, squarePrefix, '.bmp')

	
	"colorPiecePrefix := self class name asLowercase, '-', (self isBlack ifTrue: ['black'] ifFalse: ['white'] ).
	^Bitmap fromFile: (FileLocator imageRelative basePath, 'icons\', colorPiecePrefix, '.bmp')"!

drawOn: aCanvas chessboard: aChessboard at: symbolCoordinate  isDisplayCoordinatesEnabled: aBoolean
	| canvasIcon image square squarePosition |

	square := symbolCoordinate asChessSquareIn: self systemRoot.
	squarePosition := square calculatePositionAt: aChessboard.
	canvasIcon := self canvasIconAt: square.

	image := GdiplusBitmap fromBitmap: canvasIcon.

	aCanvas graphics 
		drawImage: image 
		at: squarePosition
		extent: self squareSize @ self squareSize.

	"aCanvas graphics
			drawString: (square calculatePositionAt: aChessboard) printString
			font: (GdiplusFont name: 'Arial' emSize: 8)
			at: ((square calculatePositionAt: aChessboard))
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkGreen )."

	aBoolean ifFalse: [^self].

	"aCanvas graphics 
			drawString: square name 
			font: (GdiplusFont name: 'Arial' emSize: 12)
			at: ((square calculatePositionAt: aChessboard) + (aChessboard squareSize // 2) - 10)
			format: nil 
			brush: GdiplusSolidBrush red."

	aCanvas graphics 
			drawString: square name 
			font: (GdiplusFont name: 'Arial' pixelSize: 12)
			at: ((square calculatePositionAt: aChessboard) + 2)
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkRed).! !
!ChessPiece categoriesForMethods!
canvasIconAt:!public! !
drawOn:chessboard:at:isDisplayCoordinatesEnabled:!public! !
!

!ChessSquare methodsFor!

drawNeutralOn: aCanvas chessboard: aChessboard isDisplayCoordinatesEnabled: isDisplayCoordinatesEnabled
 
	aCanvas graphics 
				drawImage: (GdiplusBitmap fromBitmap: self neutralBitmap) 
				at: (self calculatePositionAt: aChessboard)
				extent: aChessboard squareSize @ aChessboard squareSize.

"	aCanvas graphics
			drawString: (self calculatePositionAt: aChessboard) printString
			font: (GdiplusFont name: 'Arial' emSize: 8)
			at: ((self calculatePositionAt: aChessboard))
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkGreen)."

	isDisplayCoordinatesEnabled ifFalse: [^self].

	aCanvas graphics 
			drawString: self name 
			font: (GdiplusFont name: 'Arial' emSize: 14)
			at: ((self calculatePositionAt: aChessboard) + (aChessboard squareSize // 2) - 10)
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkRed).!

drawOn: aCanvas chessboard: aChessboard isDisplayCoordinatesEnabled: isDisplayCoordinatesEnabled
 
	aCanvas graphics 
				drawImage: (GdiplusBitmap fromBitmap: self bitmap) 
				at: (self calculatePositionAt: aChessboard)
				extent: aChessboard squareSize @ aChessboard squareSize.

"	aCanvas graphics
			drawString: (self calculatePositionAt: aChessboard) printString
			font: (GdiplusFont name: 'Arial' emSize: 8)
			at: ((self calculatePositionAt: aChessboard))
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkGreen)."

	isDisplayCoordinatesEnabled ifFalse: [^self].

	aCanvas graphics 
			drawString: self name 
			font: (GdiplusFont name: 'Arial' pixelSize: 16)
			at: ((self calculatePositionAt: aChessboard) + (aChessboard squareSize // 2) - 10)
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkRed).!

drawOppositeOn: aCanvas chessboard: aChessboard isDisplayCoordinatesEnabled: isDisplayCoordinatesEnabled
 
	aCanvas graphics 
				drawImage: (GdiplusBitmap fromBitmap: self oppositeBitmap) 
				at: (self calculatePositionAt: aChessboard)
				extent: aChessboard squareSize @ aChessboard squareSize.

	isDisplayCoordinatesEnabled ifFalse: [^self].

	aCanvas graphics 
			drawString: self name 
			font: (GdiplusFont name: 'Arial' emSize: 14)
			at: ((self calculatePositionAt: aChessboard) + (aChessboard squareSize // 2) - 10)
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkRed).! !
!ChessSquare categoriesForMethods!
drawNeutralOn:chessboard:isDisplayCoordinatesEnabled:!public! !
drawOn:chessboard:isDisplayCoordinatesEnabled:!public! !
drawOppositeOn:chessboard:isDisplayCoordinatesEnabled:!public! !
!

!King methodsFor!

canvasIconAt2: aChessSquare
	| file colorPiecePrefix squarePrefix chessboardModel |

	chessboardModel := 'azul_'.
	file := self pieceCode.
	colorPiecePrefix := self isBlack ifTrue: ['b'] ifFalse: ['w'].
	squarePrefix := aChessSquare isBlack ifTrue: ['b'] ifFalse: ['w'].

	^Bitmap fromFile: (FileLocator imageRelative basePath, 'icons\king-test.bmp')

	
	"colorPiecePrefix := self class name asLowercase, '-', (self isBlack ifTrue: ['black'] ifFalse: ['white'] ).
	^Bitmap fromFile: (FileLocator imageRelative basePath, 'icons\', colorPiecePrefix, '.bmp')"!

drawOn2: aCanvas chessboard: aChessboard at: symbolCoordinate  isDisplayCoordinatesEnabled: aBoolean
	| canvasIcon image square squarePosition imageAtt |

	square := symbolCoordinate asChessSquareIn: self systemRoot.
	squarePosition := square calculatePositionAt: aChessboard.
	canvasIcon := self canvasIconAt: square.

	image := GdiplusBitmap fromBitmap: canvasIcon.

	(imageAtt := GdiplusImageAttributes new) 
		colorKeys: 1
		colorLow: (Color r: 233 g: 233 b: 233)
		colorHigh: (Color r: 255 g: 255b: 255).

	aCanvas graphics 
		drawImage: image 
		at: squarePosition
		extent: self squareSize @ self squareSize
		from: Point zero
		extent: image extent
		unit: 2
		attributes: imageAtt.


	aBoolean ifFalse: [^self].


	aCanvas graphics 
			drawString: square name 
			font: (GdiplusFont name: 'Arial' emSize: 10)
			at: ((square calculatePositionAt: aChessboard) + 2)
			format: nil 
			brush: (GdiplusSolidBrush color: Color darkRed).! !
!King categoriesForMethods!
canvasIconAt2:!public! !
drawOn2:chessboard:at:isDisplayCoordinatesEnabled:!public! !
!

!MouseTracker methodsFor!

sumStartLocalPointTo: aPoint

	^startPointLocal + aPoint! !
!MouseTracker categoriesForMethods!
sumStartLocalPointTo:!public! !
!

"End of package definition"!

