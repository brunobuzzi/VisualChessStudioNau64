| package |
package := Package name: 'ChessPiecesMovementsEngine'.
package paxVersion: 1;
	basicComment: ''.


package classNames
	add: #BishopMovementEngine;
	add: #ChessEastOrientation;
	add: #ChessMovementEngine;
	add: #ChessNorthOrientation;
	add: #ChessOrientation;
	add: #ChessOrientationVector;
	add: #ChessSouthOrientation;
	add: #ChessWestOrientation;
	add: #KingMovementEngine;
	add: #KnightMovementEngine;
	add: #PawnMovementEngine;
	add: #QueenMovementEngine;
	add: #RookMovementEngine;
	add: #SlidingPieceMovementEngine;
	yourself.

package methodNames
	add: #Bishop -> #defaultMovementRuleClass;
	add: #ChessPiece -> #currentChessSquare;
	add: #ChessPiece -> #defaultMovementRuleClass;
	add: #ChessPiece -> #isValidMoveFromCoordinate:to:;
	add: #ChessPiece -> #isValidMoveFromCoordinate:to:on:;
	add: #ChessPiece -> #newMovementEngine;
	add: #King -> #defaultMovementRuleClass;
	add: #King -> #isValidCastleMoveFrom:to:on:;
	add: #King -> #isValidMoveFromCoordinate:to:on:;
	add: #Knight -> #defaultMovementRuleClass;
	add: #Pawn -> #defaultMovementRuleClass;
	add: #Pawn -> #isValidEnPassantMoveFrom:to:on:;
	add: #Pawn -> #isValidMoveFromCoordinate:to:on:;
	add: #Queen -> #defaultMovementRuleClass;
	add: #Rook -> #defaultMovementRuleClass;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'ChessBasicElements'
	'..\Core\Object Arts\Dolphin\Base\Dolphin').

package!

"Class Definitions"!

Object subclass: #ChessMovementEngine
	instanceVariableNames: 'piece squaresDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ChessOrientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #ChessOrientationVector
	instanceVariableNames: 'piece southOrNorth eastOrWest'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessMovementEngine subclass: #KingMovementEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessMovementEngine subclass: #KnightMovementEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessMovementEngine subclass: #PawnMovementEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessMovementEngine subclass: #SlidingPieceMovementEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SlidingPieceMovementEngine subclass: #BishopMovementEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SlidingPieceMovementEngine subclass: #QueenMovementEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SlidingPieceMovementEngine subclass: #RookMovementEngine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessOrientation subclass: #ChessEastOrientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessOrientation subclass: #ChessNorthOrientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessOrientation subclass: #ChessSouthOrientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ChessOrientation subclass: #ChessWestOrientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Bishop methodsFor!

defaultMovementRuleClass
	^BishopMovementEngine! !
!Bishop categoriesForMethods!
defaultMovementRuleClass!public! !
!

!ChessPiece methodsFor!

currentChessSquare

	^chessSide currentChessSquareFor: self!

defaultMovementRuleClass

	self subclassResponsibility
!

isValidMoveFromCoordinate: originCoordinate to: targetCoordinate
	| rule isValid |

	rule := self defaultMovementRuleClass newFor: self.

	chessSide chessboardDo: [:chessboard | 
		isValid := rule isValidOn: chessboard from: (originCoordinate asChessSquareIn: self systemRoot) to: (targetCoordinate asChessSquareIn: self systemRoot)].

	^isValid
!

isValidMoveFromCoordinate: originCoordinate to: targetCoordinate on: aChessGame

	^self isValidMoveFromCoordinate: originCoordinate to: targetCoordinate!

newMovementEngine
	^self defaultMovementRuleClass newFor: self! !
!ChessPiece categoriesForMethods!
currentChessSquare!public! !
defaultMovementRuleClass!public! !
isValidMoveFromCoordinate:to:!public! !
isValidMoveFromCoordinate:to:on:!public! !
newMovementEngine!public! !
!

!King methodsFor!

defaultMovementRuleClass
	^KingMovementEngine!

isValidCastleMoveFrom: originCoordinate to: targetCoordinate on: aChessGame

	self halt!

isValidMoveFromCoordinate: originCoordinate to: targetCoordinate on: aChessGame

	^(super isValidMoveFromCoordinate: originCoordinate to: targetCoordinate) or: [self isValidCastleMoveFrom: originCoordinate to: targetCoordinate on: aChessGame]! !
!King categoriesForMethods!
defaultMovementRuleClass!public! !
isValidCastleMoveFrom:to:on:!public! !
isValidMoveFromCoordinate:to:on:!public! !
!

!Knight methodsFor!

defaultMovementRuleClass
	^KnightMovementEngine! !
!Knight categoriesForMethods!
defaultMovementRuleClass!public! !
!

!Pawn methodsFor!

defaultMovementRuleClass
	^PawnMovementEngine!

isValidEnPassantMoveFrom: originCoordinate to: targetCoordinate on: aChessGame

	self halt.!

isValidMoveFromCoordinate: originCoordinate to: targetCoordinate on: aChessGame

	^(super isValidMoveFromCoordinate: originCoordinate to: targetCoordinate) or: [self isValidEnPassantMoveFrom: originCoordinate to: targetCoordinate on: aChessGame]! !
!Pawn categoriesForMethods!
defaultMovementRuleClass!public! !
isValidEnPassantMoveFrom:to:on:!public! !
isValidMoveFromCoordinate:to:on:!public! !
!

!Queen methodsFor!

defaultMovementRuleClass
	^QueenMovementEngine! !
!Queen categoriesForMethods!
defaultMovementRuleClass!public! !
!

!Rook methodsFor!

defaultMovementRuleClass
	^RookMovementEngine! !
!Rook categoriesForMethods!
defaultMovementRuleClass!public! !
!

"End of package definition"!

